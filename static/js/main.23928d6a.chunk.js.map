{"version":3,"sources":["reducers/fighters.js","reducers/fightersPage.js","reducers/index.js","actionTypes.js","containers/layout/index.js","api/index.js","api/apiHelper.js","selectors.js","containers/modal/Modal.js","containers/modal/useModal.js","containers/modal/index.js","containers/fighters/index.js","actions/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","ids","combineReducers","routing","routerReducer","fighters","state","type","payload","newValues","R","indexBy","prop","merge","fightersPage","pluck","Layout","children","fetchFighters","a","fetch","method","then","response","ok","json","Promise","reject","Error","catch","error","apiResult","console","log","content","getFighters","map","id","getFighterById","Modal","isShowing","hide","ReactDOM","createPortal","Fragment","className","aria-modal","aria-hidden","tabIndex","role","data-dismiss","aria-label","onClick","document","body","useModal","useState","setIsShowing","toggle","Dialog","Fighters","this","props","fighter","index","key","src","source","alt","name","renderFighter","Component","mapDispatchToProps","dispatch","fetchFightersApi","connect","store","createStore","reducers","composeWithDevTools","applyMiddleware","thunk","history","syncHistoryWithStore","browserHistory","App","component","path","Boolean","window","location","hostname","match","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.23928d6a.chunk.js","sourcesContent":["import R from \"ramda\";\n\nimport { FETCH_FIGHTERS_SUCCESS } from \"../actionTypes\";\n\nconst initialState = {};\n\nexport default (state = initialState, { type, payload }) => {\n  switch (type) {\n    case FETCH_FIGHTERS_SUCCESS:\n      // it's better to normalize payload before dispatching the action and put in the reducer already normalized data\n      const newValues = R.indexBy(R.prop(\"_id\"), payload);\n      return R.merge(state, newValues);\n    default:\n      return state;\n  }\n};\n","import R from 'ramda'\nimport {\n  FETCH_FIGHTERS_SUCCESS\n} from '../actionTypes'\n\nconst initialState = {\n  ids: []\n}\n\nexport default (state = initialState, {type, payload}) => {\n  switch (type) {\n    case FETCH_FIGHTERS_SUCCESS:\n      return R.merge(state, {\n        ids: R.pluck('_id', payload)\n      })\n    default:\n      return state\n  }\n}","import { combineReducers } from 'redux'\nimport { routerReducer } from 'react-router-redux'\n\nimport fighters from './fighters'\nimport fightersPage from './fightersPage'\n\nexport default combineReducers({\n  routing: routerReducer,\n  fighters,\n  fightersPage\n})","export const FETCH_FIGHTERS_START = 'FETCH_FIGHTERS_START'\nexport const FETCH_FIGHTERS_SUCCESS = 'FETCH_FIGHTERS_SUCCESS'\nexport const FETCH_FIGHTERS_FAILURE = 'FETCH_FIGHTERS_FAILURE'","import React from 'react'\n\nconst Layout = ({children}) => (\n  <div>\n    {children}\n  </div>\n)\n\nexport default Layout","import { callApi } from './apiHelper'\n\nexport const fetchFighters = async () => {\n  try {\n    const endpoint = '5d9309a730000067001b719b';\n    const apiResult = await callApi(endpoint, 'GET');\n    console.log(apiResult)\n    return apiResult.content;\n  } catch (error) {\n    throw error;\n  }\n}","const API_URL =\n  'http://www.mocky.io/v2/';\n\nexport const callApi = (endpoind, method) => {\n  const url = API_URL + endpoind;\n\tconst options = {\n\t\tmethod,\n\t};\n\n\treturn fetch(url, options)\n\t\t.then(response =>\n\t\t\tresponse.ok ? response.json() : Promise.reject(Error('Failed to load'))\n\t\t)\n\t\t.catch(error => {\n\t\t\tthrow error;\n\t\t});\n}\n","import R from \"ramda\";\n\nconst getFighterById = (state, id) => R.prop(id, state.fighters);\n\n// try to use reselect here: https://github.com/reduxjs/reselect\nexport const getFighters = state => {\n  const fighters = R.map(\n    id => getFighterById(state, id),\n    state.fightersPage.ids\n  );\n  return fighters;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Modal = ({ isShowing, hide }) => isShowing ? ReactDOM.createPortal(\n  <React.Fragment>\n    <div className=\"modal-overlay\"/>\n    <div className=\"modal-wrapper\" aria-modal aria-hidden tabIndex={-1} role=\"dialog\">\n      <div className=\"modal\">\n        <div className=\"modal-header\">\n          <button type=\"button\" className=\"modal-close-button\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={hide}>\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </div>\n        <p>\n          Hello, I'm a modal.\n        </p>\n      </div>\n    </div>\n  </React.Fragment>, document.body\n) : null;\n\nexport default Modal;","import { useState } from 'react'\n\nconst useModal = () => {\n  const [isShowing, setIsShowing] = useState(false)\n\n  function toggle() {\n    setIsShowing(!isShowing);\n  }\n\n  return {\n    isShowing,\n    toggle,\n  }\n};\n\nexport default useModal","import React from \"react\";\nimport Modal from \"./Modal\";\nimport useModal from \"./useModal\";\n\nconst Dialog = () => {\n  const { isShowing, toggle } = useModal();\n\n  return (\n    <div className=\"App\">\n      <button className=\"button-default\" onClick={toggle}>\n        Show Modal\n      </button>\n      <Modal isShowing={isShowing} hide={toggle} />\n    </div>\n  );\n};\n\nexport default Dialog;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { fetchFighters } from \"../../actions\";\nimport { getFighters } from \"../../selectors\";\nimport Dialog from \"../modal\";\n\nclass Fighters extends Component {\n  componentDidMount() {\n    this.props.fetchFighters();\n  }\n  renderFighter(fighter, index) {\n    return (\n      // index as a key is an anti-pattern espessialy when you have stable IDs\n      // https://reactjs.org/docs/lists-and-keys.html\n      <div className=\"fighter\" key={index}>\n        <img\n          className=\"fighter-image\"\n          src={fighter.source}\n          alt={fighter.source}\n        />\n        <span className=\"name\">{fighter.name}</span>\n\n        <Dialog />\n      </div>\n    );\n  }\n  render() {\n    const { fighters } = this.props;\n\n    return <div className=\"fighters\">{fighters.map(this.renderFighter)}</div>;\n  }\n}\n\nconst mapStateToProps = state => ({\n  fighters: getFighters(state)\n});\n\nconst mapDispatchToProps = {\n  fetchFighters\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Fighters);\n","import {\n  FETCH_FIGHTERS_START,\n  FETCH_FIGHTERS_SUCCESS,\n  FETCH_FIGHTERS_FAILURE\n} from '../actionTypes'\nimport {\n  fetchFighters as fetchFightersApi\n} from '../api'\n\n\nexport const fetchFighters = () => async dispatch => {\n  dispatch({type: FETCH_FIGHTERS_START})\n\n  try {\n    const fighters = await fetchFightersApi()\n    dispatch({\n      type: FETCH_FIGHTERS_SUCCESS,\n      payload: fighters\n    })\n  } catch (err) {\n    dispatch({\n      type: FETCH_FIGHTERS_FAILURE,\n      payload: err,\n      error: true\n    })\n  }\n  \n}","import \"./App.css\";\n\nimport React from \"react\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { browserHistory } from \"react-router\";\nimport { syncHistoryWithStore } from \"react-router-redux\";\nimport { Provider } from \"react-redux\";\nimport { Router, Route } from \"react-router\";\n\nimport reducers from \"./reducers\";\nimport Layout from \"./containers/layout\";\nimport Fighters from \"./containers/fighters\";\n\nconst store = createStore(\n  reducers,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nconst history = syncHistoryWithStore(browserHistory, store);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router history={history}>\n        <Route component={Layout}>\n          <Route path=\"/\" component={Fighters} />\n        </Route>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}