{"version":3,"sources":["reducers/fighters.js","reducers/fightersPage.js","reducers/dialogFighter.js","reducers/arena.js","reducers/index.js","actionTypes.js","containers/layout/index.js","api/apiHelper.js","api/index.js","selectors.js","containers/modal/index.js","containers/fighters/index.js","actions/index.js","containers/arena/fighter.js","containers/arena/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","ids","isOpen","combineReducers","routing","routerReducer","fighters","state","type","payload","newValues","R","indexBy","prop","merge","fightersPage","pluck","dialogFighter","arena","append","Layout","children","className","callApi","endpoind","method","fetch","then","response","ok","json","Promise","reject","Error","catch","error","fetchFighters","a","apiResult","content","getFighterById","id","getFighters","map","getFighter","getFightersInArena","Dialog","closeModal","that","fighter","name","health","attack","defense","onClick","Fighters","props","visible","arenaControl","this","fighterId","fetchFighterById","setState","pushFighterById","length","startGameBtn","disabled","console","log","alert","openModal","key","_id","src","source","alt","value","to","ref","button","renderFighter","bind","width","height","effect","onClickAway","fighterToArena","Component","mapDispatchToProps","dispatch","fetchFightersApi","err","connect","Fighter","fighter1Health","fighter2Health","index","reverse","fight","div","fighter1Block","fighter2Block","img","fighter1column","fighter2column","copyReverse","punch1Btn","punch2Btn","Arena","fighter1Name","fighter2Name","fighter1","fighter2","result","hitPowerFighter1","getHitPower","blockPowerFighter2","getBlockPower","setTimeout","classList","toggle","min","max","criticalHitChance","Math","floor","random","powerHit","dodgeChance","powerBlock","store","createStore","reducers","composeWithDevTools","applyMiddleware","thunk","history","syncHistoryWithStore","browserHistory","App","component","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.93ed8c4d.chunk.js","sourcesContent":["import R from \"ramda\";\r\n\r\nimport { FETCH_FIGHTERS_SUCCESS } from \"../actionTypes\";\r\n\r\nconst initialState = {};\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case FETCH_FIGHTERS_SUCCESS:\r\n      // it's better to normalize payload before dispatching the action and put in the reducer already normalized data\r\n      const newValues = R.indexBy(R.prop(\"_id\"), payload);\r\n      return R.merge(state, newValues);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import R from 'ramda'\r\nimport {\r\n  FETCH_FIGHTERS_SUCCESS\r\n} from '../actionTypes'\r\n\r\nconst initialState = {\r\n  ids: []\r\n}\r\n\r\nexport default (state = initialState, {type, payload}) => {\r\n  switch (type) {\r\n    case FETCH_FIGHTERS_SUCCESS:\r\n      return R.merge(state, {\r\n        ids: R.pluck('_id', payload)\r\n      })\r\n    default:\r\n      return state\r\n  }\r\n}","import R from \"ramda\";\r\n\r\nimport { GET_FIGHTER_BY_ID_SUCCESS  } from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  isOpen: false\r\n};\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case GET_FIGHTER_BY_ID_SUCCESS:\r\n      // return  R.merge(state, R.indexBy(R.prop(\"_id\"), payload));\r\n      return R.merge(state, payload)\r\n    default:\r\n      return state;\r\n  }\r\n};","import R from 'ramda'\r\nimport {\r\n  PUSH_FIGHTER_ID_TO_ARENA_SUCCESS\r\n} from '../actionTypes'\r\n\r\nconst initialState = {\r\n  ids: []\r\n}\r\n\r\nexport default (state = initialState, {type, payload}) => {\r\n  switch (type) {\r\n    case PUSH_FIGHTER_ID_TO_ARENA_SUCCESS:\r\n      return R.merge(state, {\r\n        ids: R.append(payload, state.ids)\r\n      })\r\n    default:\r\n      return state\r\n  }\r\n}","import { combineReducers } from 'redux'\r\nimport { routerReducer } from 'react-router-redux'\r\n\r\nimport fighters from './fighters'\r\nimport fightersPage from './fightersPage'\r\nimport dialogFighter from './dialogFighter'\r\nimport arena from './arena'\r\n\r\nexport default combineReducers({\r\n  routing: routerReducer,\r\n  fighters,\r\n  fightersPage,\r\n  dialogFighter,\r\n  arena\r\n})","export const FETCH_FIGHTERS_START = 'FETCH_FIGHTERS_START'\r\nexport const FETCH_FIGHTERS_SUCCESS = 'FETCH_FIGHTERS_SUCCESS'\r\nexport const FETCH_FIGHTERS_FAILURE = 'FETCH_FIGHTERS_FAILURE'\r\n\r\nexport const GET_FIGHTER_BY_ID_START = 'GET_FIGHTER_BY_ID_START'\r\nexport const GET_FIGHTER_BY_ID_SUCCESS = 'GET_FIGHTER_BY_ID_SUCCESS'\r\nexport const GET_FIGHTER_BY_ID_FAILURE = 'GET_FIGHTER_BY_ID_FAILURE'\r\n\r\nexport const PUSH_FIGHTER_ID_TO_ARENA_START = 'PUSH_FIGHTER_ID_TO_ARENA_START'\r\nexport const PUSH_FIGHTER_ID_TO_ARENA_SUCCESS = 'PUSH_FIGHTER_ID_TO_ARENA_SUCCESS'\r\nexport const PUSH_FIGHTER_ID_TO_ARENA_FAILURE = 'PUSH_FIGHTER_ID_TO_ARENA_FAILURE'\r\n\r\n\r\n","import React from 'react'\r\n\r\nconst Layout = ({children}) => (\r\n  <div className=\"layout\">\r\n    {children}\r\n  </div>\r\n)\r\n\r\nexport default Layout","const API_URL =\r\n  'http://www.mocky.io/v2/';\r\n\r\nexport const callApi = (endpoind, method) => {\r\n  const url = API_URL + endpoind;\r\n\tconst options = {\r\n\t\tmethod,\r\n\t};\r\n\r\n\treturn fetch(url, options)\r\n\t\t.then(response =>\r\n\t\t\tresponse.ok ? response.json() : Promise.reject(Error('Failed to load'))\r\n\t\t)\r\n\t\t.catch(error => {\r\n\t\t\tthrow error;\r\n\t\t});\r\n}\r\n","import R from 'ramda'\r\nimport { callApi } from './apiHelper'\r\n\r\nexport const fetchFighters = async () => {\r\n  try {\r\n    const endpoint = '5d9309a730000067001b719b';\r\n    const apiResult = await callApi(endpoint, 'GET');\r\n    return apiResult.content;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const fetchFighterByIdApi = async id => {\r\n  try {\r\n    const endpoint = '5dac35a230000081002986b0';\r\n    const apiResult = await callApi(endpoint, 'GET');\r\n    return R.find(R.propEq('_id', id), apiResult.content);\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}","import R from \"ramda\";\r\n\r\nconst getFighterById = (state, id) => R.prop(id, state.fighters);\r\n\r\n// try to use reselect here: https://github.com/reduxjs/reselect\r\nexport const getFighters = state => {\r\n  const fighters = R.map(\r\n    id => getFighterById(state, id),\r\n    state.fightersPage.ids\r\n  );\r\n  return fighters;\r\n};\r\n\r\nexport const getFighter = state => {\r\n  const fighter = R.prop(\r\n    state.dialogFighter[0],\r\n    // id => getFighterById(state, id),\r\n    state.fighters\r\n    // id => R.find(R.propEq('_id', id), state.fighters)\r\n  );\r\n  return fighter;\r\n};\r\n\r\nexport const getFightersInArena = state => {\r\n  const fighters = R.map(\r\n    id => getFighterById(state, id),\r\n    state.arena.ids\r\n  );\r\n  return fighters;\r\n};","import React from 'react';\r\n\r\nconst  Dialog = ({closeModal, that, fighter}) => {\r\n    return (\r\n      <div className=\"fighter-info\">\r\n        <div className=\"name\">\r\n          <h2>{fighter.name || \"default\"}</h2>\r\n        </div>\r\n        <span className=\"border\"/>\r\n        <div>\r\n          <div className=\"values\">\r\n            <div className=\"stats\">\r\n              <span>Health:</span>\r\n              <span>{fighter.health || \"default\"}</span>\r\n            </div>\r\n            <div className=\"stats\">\r\n              <span>Attack:</span>\r\n              <span>{fighter.attack || \"default\"}</span>\r\n            </div>\r\n            <div className=\"stats\">\r\n              <span>Defence:</span>\r\n              <span>{fighter.defense || \"default\"}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"fighterBtnBlock\">\r\n          <button className=\"fighterBtn\"  onClick={() => closeModal(that)}>Choose {fighter.name}</button>\r\n        </div>\r\n      </div>\r\n    )\r\n};\r\n\r\n  export default Dialog","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Modal from 'react-awesome-modal';\r\nimport { Link } from 'react-router'\r\n\r\nimport { fetchFighters, getFighterById, pushFighterById } from \"../../actions\";\r\nimport { getFighters, getFighter } from \"../../selectors\";\r\nimport Dialog from \"../modal\";\r\n\r\nclass Fighters extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      isOpen : props.visible,\r\n      arenaControl: []\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.props.fetchFighters();\r\n  }\r\n  openModal(that, fighterId, fetchFighterById) {\r\n    fetchFighterById(fighterId);\r\n    that.setState({\r\n      isOpen : !that.state.visible\r\n    });\r\n  }\r\n\r\n  closeModal(that) {\r\n    that.setState({\r\n      isOpen : that.state.visible\r\n    });\r\n  }\r\n\r\n  fighterToArena(closeModal, that, fighterId, pushFighterById){\r\n    if (that.state.arenaControl.length < 1) {\r\n      that.setState({\r\n        arenaControl :  [...that.state.arenaControl, fighterId]\r\n      });\r\n      pushFighterById(fighterId)\r\n    } else if (that.state.arenaControl.length === 1) {\r\n      that.setState({\r\n        arenaControl :  [...that.state.arenaControl, fighterId]\r\n      });\r\n      pushFighterById(fighterId)\r\n      that.startGameBtn.disabled = false;\r\n    } else {\r\n      console.log(that.state.arenaControl)\r\n      alert('You cannot add third fighter\\nPlease start the game');\r\n    }\r\n    closeModal(that)\r\n  }\r\n\r\n  renderFighter(getFighterById, openModal, fighter) {\r\n    const that = this;\r\n    return (\r\n      <div className=\"fighter\" key={fighter._id}>\r\n        <img\r\n          className=\"fighter-image\"\r\n          src={fighter.source}\r\n          alt={fighter.source}\r\n        />\r\n        <span className=\"name\">{fighter.name}</span>\r\n        <input \r\n          className=\"showModal-btn\" \r\n          type=\"button\" \r\n          value=\"Fighter info\" \r\n          onClick={() => openModal(that, fighter._id, getFighterById)} \r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  render() {\r\n    const { fighters, getFighterById, fighter, pushFighterById} = this.props;\r\n    const that = this;\r\n    return (\r\n      <div>\r\n        <div className=\"startGame\">\r\n          <Link to={`/arena`}>\r\n            <button \r\n              className=\"startGameBtn\"  \r\n              ref={(button) => { that.startGameBtn = button}} \r\n              disabled\r\n            >\r\n              Start Fight\r\n            </button>\r\n          </Link>\r\n        </div>\r\n        <div className=\"fighters\">\r\n          {fighters.map(this.renderFighter.bind(this, getFighterById, this.openModal))}\r\n          <Modal \r\n            visible={this.state.isOpen} \r\n            width=\"230\" height=\"180\" \r\n            effect=\"fadeInUp\" \r\n            onClickAway={() => this.closeModal(that)}\r\n          >\r\n            <Dialog \r\n              closeModal={() => {this.fighterToArena(this.closeModal, that, fighter._id, pushFighterById)}} \r\n              that={this}\r\n              fighter={fighter || {}}\r\n            />\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n      );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  fighters: getFighters(state),\r\n  fighter: getFighter(state),\r\n  visible: state.dialogFighter.isOpen\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  fetchFighters,\r\n  getFighterById,\r\n  pushFighterById\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Fighters);\r\n","import {\r\n  FETCH_FIGHTERS_START,\r\n  FETCH_FIGHTERS_SUCCESS,\r\n  FETCH_FIGHTERS_FAILURE,\r\n  GET_FIGHTER_BY_ID_START,\r\n  GET_FIGHTER_BY_ID_SUCCESS,\r\n  GET_FIGHTER_BY_ID_FAILURE,\r\n  PUSH_FIGHTER_ID_TO_ARENA_START,\r\n  PUSH_FIGHTER_ID_TO_ARENA_SUCCESS,\r\n  PUSH_FIGHTER_ID_TO_ARENA_FAILURE\r\n\r\n} from '../actionTypes'\r\nimport {\r\n  fetchFighters as fetchFightersApi\r\n  // fetchFighterByIdApi\r\n} from '../api'\r\n\r\n\r\nexport const fetchFighters = () => async dispatch => {\r\n  dispatch({type: FETCH_FIGHTERS_START})\r\n\r\n  try {\r\n    const fighters = await fetchFightersApi()\r\n    dispatch({\r\n      type: FETCH_FIGHTERS_SUCCESS,\r\n      payload: fighters\r\n    })\r\n  } catch (err) {\r\n    dispatch({\r\n      type: FETCH_FIGHTERS_FAILURE,\r\n      payload: err,\r\n      error: true\r\n    })\r\n  }\r\n}\r\n\r\nexport const getFighterById = id => dispatch => {\r\n  dispatch({type: GET_FIGHTER_BY_ID_START})\r\n\r\n  try {\r\n    // const fighter = await fetchFighterByIdApi(id)\r\n    dispatch({\r\n      type: GET_FIGHTER_BY_ID_SUCCESS,\r\n      payload: id\r\n    })\r\n  } catch (err) {\r\n    dispatch({\r\n      type: GET_FIGHTER_BY_ID_FAILURE,\r\n      payload: err,\r\n      error: true\r\n    })\r\n  }\r\n}\r\n\r\nexport const pushFighterById = id => dispatch => {\r\n  dispatch({type: PUSH_FIGHTER_ID_TO_ARENA_START})\r\n\r\n  try {\r\n    // const fighter = await fetchFighterByIdApi(id)\r\n    dispatch({\r\n      type: PUSH_FIGHTER_ID_TO_ARENA_SUCCESS,\r\n      payload: id\r\n    })\r\n  } catch (err) {\r\n    dispatch({\r\n      type: PUSH_FIGHTER_ID_TO_ARENA_FAILURE,\r\n      payload: err,\r\n      error: true\r\n    })\r\n  }\r\n}","import React from 'react';\r\n\r\nconst Fighter = ({\r\n  that, \r\n  fighter, \r\n  fighters, \r\n  fighter1Health, \r\n  fighter2Health, \r\n  index, \r\n  reverse, \r\n  fight \r\n}) => {\r\n  return (\r\n    <div \r\n      className=\"column\"\r\n      ref={(div) => { (index === 0)? that.fighter1Block = div: that.fighter2Block = div}}\r\n    >\r\n      <div className=\"values\">\r\n        <div className=\"name\">\r\n          <h2 className=\"custom\">{fighter.name}</h2>\r\n        </div>\r\n        <div className=\"stats\">\r\n          <span>Attack:</span>\r\n          <span>{fighter.attack}</span>\r\n          <span>Defence:</span>\r\n          <span>{fighter.defense}</span>\r\n          <span>Health:</span>\r\n          <span>{(index === 0)? fighter1Health: fighter2Health}</span>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <div className={reverse(index)}>\r\n            <img\r\n              className=\"fighter-image\"\r\n              src={fighter.source}\r\n              alt={fighter.source}\r\n              ref={(img) => { (index === 0)? that.fighter1column = img: that.fighter2column = img}}\r\n            />\r\n          </div>\r\n          <div className=\"fighterBtnBlock\">\r\n            <button \r\n              className=\"punchBtn\" \r\n              onClick={() => {\r\n                if (index === 0) {\r\n                  fight(...fighters, that, fighter2Health, index)\r\n                } else {\r\n                  const copy = [...fighters];\r\n                  const copyReverse = copy.reverse();\r\n                  fight(...copyReverse, that, fighter1Health, index)\r\n                }\r\n              }}\r\n              ref={(button) => { (index === 0)? that.punch1Btn = button: that.punch2Btn = button}}\r\n            >\r\n              Punch\r\n            </button>\r\n          </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Fighter","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from 'react-router'\r\nimport Modal from 'react-awesome-modal';\r\n\r\nimport { getFightersInArena } from \"../../selectors\";\r\nimport Fighter from \"./fighter\"\r\n\r\nclass Arena extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      fighters : props.fighters,\r\n      fighter1Name:  props.fighters[0].name,\r\n      fighter2Name:  props.fighters[1].name,\r\n      fighter1Health: props.fighters[0].health,\r\n      fighter2Health: props.fighters[1].health,\r\n      isOpen : false\r\n    }\r\n  }\r\n  fight(fighter1, fighter2, that, health, index) {\r\n\t\tconst hitPowerFighter1 = that.getHitPower(fighter1);\r\n\t\tconst blockPowerFighter2 = that.getBlockPower(fighter2);\r\n    let result;\r\n\t\tif (hitPowerFighter1 <= blockPowerFighter2) {\r\n      result = 0;\r\n      if (index === 0) {\r\n        setTimeout(() => {\r\n          that.fighter2column.classList.toggle('block');\r\n        }, 2700);\r\n        setTimeout(() => {\r\n          that.fighter2column.classList.toggle('block');\r\n        }, 3000);\r\n      } else {\r\n        setTimeout(() => {\r\n          that.fighter1column.classList.toggle('block');\r\n        }, 2700);\r\n        setTimeout(() => {\r\n          that.fighter1column.classList.toggle('block');\r\n        }, 3000);\r\n      }\r\n\t\t} else {\r\n      result = hitPowerFighter1 - blockPowerFighter2;\r\n      if (index === 0) {\r\n        setTimeout(() => {\r\n          that.fighter2column.classList.toggle('punch');\r\n        }, 2700);\r\n        setTimeout(() => {\r\n          that.fighter2column.classList.toggle('punch');\r\n        }, 3000);\r\n      } else {\r\n        setTimeout(() => {\r\n          that.fighter1column.classList.toggle('punch');\r\n        }, 2700);\r\n        setTimeout(() => {\r\n          that.fighter1column.classList.toggle('punch');\r\n        }, 3000);\r\n      }\r\n\t\t}\r\n    if (index === 0) {\r\n      that.punch1Btn.disabled = true;\r\n      that.punch2Btn.disabled = false;\r\n      that.fighter1column.classList.toggle('animate');\r\n      setTimeout(() => {\r\n        that.setState({\r\n          fighter2Health: health - result \r\n        })\r\n      }, 2700);\r\n    } else {\r\n      console.log(that);\r\n      that.punch1Btn.disabled = false;\r\n      that.punch2Btn.disabled = true;\r\n      that.fighter2column.classList.toggle('animate');\r\n      that.fighter1column.classList.toggle('animate');\r\n      setTimeout(() => {\r\n        that.fighter2column.classList.toggle('animate');\r\n      }, 3500);\r\n      setTimeout(() => {\r\n        that.setState({\r\n          fighter1Health: health - result \r\n        })\r\n      }, 2700);\r\n    }\r\n    if (that.state.fighter1Health <= 0) {\r\n      that.setState({\r\n        isOpen: !that.state.isOpen\r\n      })\r\n    } else if (that.state.fighter2Health <= 0) {\r\n      that.setState({\r\n        isOpen: !that.state.isOpen\r\n      })\r\n    }\r\n\t}\r\n  getHitPower(fighter, min = 1, max = 2) {\r\n\t\tconst criticalHitChance = Math.floor(min + Math.random() * (max + 1 - min));\r\n\t\tconst powerHit = fighter.attack * criticalHitChance;\r\n\t\treturn powerHit;\r\n  }\r\n  \r\n\tgetBlockPower(fighter, min = 1, max = 2) {\r\n\t\tconst dodgeChance = Math.floor(min + Math.random() * (max + 1 - min));\r\n\t\tconst powerBlock = fighter.defense * dodgeChance;\r\n\t\treturn powerBlock;\r\n  }\r\n  \r\n  renderFighter(that, fighter, index) {\r\n    const reverseFighter = (index) => {\r\n      if (index === 0) {\r\n        return \"fighter\"\r\n      } else {\r\n        return \"fighter rotate\"\r\n      }\r\n    }\r\n    return (\r\n      <Fighter \r\n        that={that}\r\n        fighter={fighter} \r\n        fighters={that.state.fighters}\r\n        fighter1Health={that.state.fighter1Health}\r\n        fighter2Health={that.state.fighter2Health}\r\n        index={index} \r\n        reverse={reverseFighter} \r\n        fight={this.fight}\r\n        key={fighter._id}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { fighters } = this.props;\r\n    const that = this;\r\n    return (\r\n      <div className=\"arena-background\">\r\n        <div className=\"arena-fighters\">\r\n          {fighters.map(this.renderFighter.bind(this, that))}\r\n        </div>\r\n        <Modal \r\n            visible={this.state.isOpen} \r\n            width=\"230\" height=\"150\" \r\n            effect=\"fadeInUp\" \r\n        >\r\n          <div>\r\n            <div className=\"name\">\r\n              <h2>{(this.state.fighter1Health <= 0)? this.state.fighter2Name: this.state.fighter1Name} Winned</h2>\r\n            </div>\r\n            <span className=\"border\"/>\r\n            <div className=\"fighterBtnBlock\">\r\n              <Link to={`/`}>\r\n                <button className=\"fighterBtn\">\r\n                  Game Over\r\n                </button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  fighters: getFightersInArena(state)\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(Arena);\r\n","import \"./App.css\";\r\n\r\nimport React from \"react\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { browserHistory } from \"react-router\";\r\nimport { syncHistoryWithStore } from \"react-router-redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport { Router, Route } from \"react-router\";\r\n\r\nimport reducers from \"./reducers\";\r\nimport Layout from \"./containers/layout\";\r\nimport Fighters from \"./containers/fighters\";\r\nimport Arena from \"./containers/arena\";\r\n\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nconst history = syncHistoryWithStore(browserHistory, store);\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router history={history}>\r\n        <Route component={Layout}>\r\n          <Route path=\"/\" component={Fighters} />\r\n        </Route>\r\n        <Route path=\"/arena\" component={Arena} />\r\n      </Router>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}